<?php

namespace VL\SiteBundle\Repository;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Cookie;
use Symfony\Component\HttpFoundation\Response;
use VL\SiteBundle\Entity;
use VL\SiteBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getUsers($user, $email)
    {
        $qb = $this->createQueryBuilder('u')
            ->Where('u.username = :username')
            ->setParameter('username', $user)
            ->andWhere('u.email = :email')
           ->setParameter('email', $email);
        $query = $qb->getQuery();
        $us= $query->getResult();
        return $us;
    }




    public function setUser($user, $em)
    {

        $nach=10000; $kon=mt_getrandmax();
        $secret=mt_rand($nach,$kon);
        $login=$user['email'];
        $user['salt']=$secret;


        $user1=new User();

        $user1->setUsername($user['username']);
        $user1->setFirstName($user['first_name']);
        $user1->setLastName($user['last_name']);
        $user1->setEmail($user['email']);
        $user1->setSalt($secret);
        $password_hash =  sha1(trim($login."!".$secret));
        $user1->setPassword($password_hash);
        $user1->setIpAddress($_SERVER['REMOTE_ADDR']);
        $user1->setCreatedAtValue();


        $em->persist($user1);
        $em->flush();
        $user['id']=$user1->getId();
        return $user;
    }


    public function userUpdate($user, $em)
    {


        $login=$user[0]->getEmail();

        $secretkey=$user[0]->getSalt();

        $password_hash = sha1(trim($login."!".$secretkey));
        if($password_hash==$user[0]->getPassword())
        {
            $nach=10000; $kon=mt_getrandmax();
            $secret=mt_rand($nach,$kon);
            $new_password_hash = sha1(trim($login."!".$secret));
            $user[0]->setCreatedAtValue();
            $user[0]->setSalt($secret);
            $user[0]->setPassword($new_password_hash);
             $em->persist($user[0]);
            $em->flush();
        }
        return $user;
    }


    public function setCooky($user)
    {
        //    $stack=array($slug1);
         //  $stack1=implode(':',$stack);
       // $stack1=$stack1.":".$stack1;
        $secret=$user['salt'];
             $curr_date = time();
        $hash=md5($secret."!".$_SERVER['REMOTE_ADDR']);
        $value=$user['username']."!".$hash."!".$curr_date."!".$user['email'];

        $html='<html><body>WebEngineerRestrictedArea='.$value.'</body></html>';
        $response= new Response($html);
        $response->headers->setCookie(new Cookie('WebEngineerRestrictedArea',$value));
        $response->send();
         //   setcookie("WebEngineerRestrictedArea",$_POST['name']."!".md5($secret."!".$_SERVER['REMOTE_ADDR'])."!".$curr_date ."!".$stack1, time()+60*60*24);
            return ;
    }



    public function getMaximum()
    {
        $qb = $this->createQueryBuilder('n')
            ->select('max(n.numContract)');
        $query = $qb->getQuery();
        $us= $query->getResult();
        return $us[0][1];

    }

    public function userUpdateProduct($id,$params,$em)
    {
        $contract=$this->getMaximum();
        $contract+=1;
        $qb = $this->createQueryBuilder('u')
            ->Where('u.id = :id')
            ->setParameter('id', $id);
        $query = $qb->getQuery();
        $us= $query->getResult();
        $mydate=date('d-m-y');

        $ss=implode(',',$params); // перевод в строку
        $sas=$mydate.' № '.$ss.': ';

        if($us[0]->getNumContract()==false)
        {
            $us[0]->setNumContract($contract);


            $us[0]->setStrokaContract($sas);  // перевел в строку и запомнил
        } else{
                $lessons=array(); $lessonpar=array();
              //  $lessons[]=explode(',',$us[0]->getStrokaContract());
            $lessons[]=$us[0]->getStrokaContract();
               $ss=$sas.implode(',',$lessons);
           // $sas=implode(',',$ss);
            $us[0]->setStrokaContract($ss);
           /*  $datant=count($lessons);
             $lessonpar=$params;
                 $priznak='false';
            if($lessons[0])
                {
                    for($j=0; $j<$datant; $j++)
                    {
                        for ($i = 0, $cnt = count($params); $i < $cnt; $i++)
                        {

                            if ($lessons[0][$j] == 'NULL') break;
                            if ($lessons[0][$j] == $lessonpar[$i])
                              {
                                  $priznak = "true";
                                   break;
                              }

                        }
                    }
                         if($priznak=="true")
                          {

                              $us[0]->setStrokaContract($ss);

                           }
                             else{
                                 $su1=array();
                                   $su1[]=array_merge($lessons[0],$params);
                                   $ss1=implode(',',$su1[0]);
                                   $us[0]->setStrokaContract($ss1);
                                 } */

               /*   }
                   else
                      {

                         $us[0]->setStrokaContract($ss);
                      }*/

              }
         $y=$us[0]->getId();
        $em->persist($us[0]);
        $em->flush();
        return $us[0];
    }

}




















